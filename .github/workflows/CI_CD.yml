---
name: CI CD

on: [push]
env:
  CI: "true"
  SIMPLECOV: "true"
  RUBY_VERSION: 2.6.5

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    if: "!startsWith(github.head_ref, 'chore/l10n')"
    services:
      postgres:
        image: postgres:11
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      RDS_USERNAME: postgres
      RDS_PASSWORD: postgres
      RDS_HOST: localhost
      RAILS_ENV: test
      # Set locales available for i18n tasks
      ENFORCED_LOCALES: "en,fr"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/master' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - name: Create db
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate
      - run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        name: Create the screenshots folder
      - uses: nanasess/setup-chromedriver@v1.0.1
      - run: |
          bundle exec rspec --exclude-pattern ./spec/system
        name: RSpec
        working-directory: ${{ env.DECIDIM_MODULE }}
      - run: ./.github/upload_coverage.sh $DECIDIM_MODULE $GITHUB_EVENT_PATH
        name: Upload coverage
      - uses: actions/upload-artifact@v2-preview
        if: always()
        with:
          name: screenshots
          path: ./spec/decidim_dummy_app/tmp/screenshots
  tests_system:
    name: Tests
    runs-on: ubuntu-latest
    if: "!startsWith(github.head_ref, 'chore/l10n')"
    services:
      postgres:
        image: postgres:11
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      RDS_USERNAME: postgres
      RDS_PASSWORD: postgres
      RDS_HOST: localhost
      RAILS_ENV: test
      # Set locales available for i18n tasks
      ENFORCED_LOCALES: "en,fr"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/master' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - name: Create db
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate
      - run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        name: Create the screenshots folder
      - uses: nanasess/setup-chromedriver@v1.0.1
      - run: |
          bundle exec rspec ./spec/system
        name: RSpec
        working-directory: ${{ env.DECIDIM_MODULE }}
      - run: ./.github/upload_coverage.sh $DECIDIM_MODULE $GITHUB_EVENT_PATH
        name: Upload coverage
      - uses: actions/upload-artifact@v2-preview
        if: always()
        with:
          name: screenshots
          path: ./spec/decidim_dummy_app/tmp/screenshots
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    if: "!startsWith(github.head_ref, 'chore/l10n')"
    timeout-minutes: 60
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v2.0.0
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "::set-output name=dir::$(npm get cache)-lint"
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-
      - name: Install JS dependencies
        run: npm ci
      - run: bundle exec rubocop -P
        name: Lint Ruby files
  test_build:
    needs: [tests, tests_system, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test build
        run: |
          ./.github/test_build.rb
  build:
    # TODO: Remove this once we have merged on master
    if: "github.ref == 'refs/heads/feature/kubernetes'"
    needs: [test_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to registry
        run: |
          docker login ${{ secrets.REGISTRY }} -u userdoesnotmatter -p ${{ secrets.TOKEN }}
      - name: Duplicating previous image and renaming it
        run: |
          docker pull ${{ secrets.PRODUCTION_TAG }}
          docker tag ${{ secrets.PRODUCTION_TAG }} ${{ secrets.PREVIOUS_PRODUCTION_TAG }}
          docker push ${{ secrets.PREVIOUS_PRODUCTION_TAG }}
      - name: Build image
        run: |
          docker build . --compress --tag ${{ secrets.PRODUCTION_TAG }}
      - name: Push Image
        run: |
          docker push ${{ secrets.PRODUCTION_TAG }}
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Store kubeconfig
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          echo $KUBECONFIG | base64 -d > ~/.kube/config
      - name: Backup
        run:
          ./.github/backup.rb
      - name: Deploy
        run: |
          ./.github/deploy.rb